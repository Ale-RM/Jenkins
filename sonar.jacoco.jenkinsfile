pipeline {
    agent any
    tools {
        jdk 'JDK 11'
        sonarscan 'SonarQube Scanner'
    }
    environment {
        GIT_URL = 'https://github.com/myuser/myproject.git'
        GIT_BRANCH = 'main'
        PROJECT_NAME = 'MyProject'
        JACOCO_AGENT_PORT = 6989
        JACOCO_AGENT_ADDRESS = '192.168.1.22'
        REPORT_DIR = 'target/site/jacoco'
        SONAR_PROJECT_KEY = 'myproject'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout source code from Git repository
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: env.GIT_BRANCH]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CloneOption', depth: 1]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: env.GIT_URL]]
                ])
            }
        }
        stage('Build and analyze with Jacoco') {
            steps {
                // Configure Jacoco plugin to connect to remote Jacoco server on the remote machine and retrieve .exec file
                jacoco(
                    execPattern: '**/*.exec',
                    classDumpDir: 'target/jacoco/classpathdumps',
                    excludes: '',
                    includes: '**/*',
                    address: env.JACOCO_AGENT_ADDRESS,
                    port: env.JACOCO_AGENT_PORT
                )
                // Generate code coverage report using Maven and Jacoco
                sh 'mvn clean install'
                sh 'mvn jacoco:report'
            }
        }
        stage('Static code analysis with SonarQube') {
            steps {
                // Analyze source code with SonarQube scanner
                withSonarQubeEnv('sonarqube') {
                    sh "${tool('sonarscan')}/bin/sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.projectName=$PROJECT_NAME -Dsonar.sources=src -Dsonar.java.binaries=target/classes -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml"
                }
            }
        }
    }
    post {
        always {
            // Publish code coverage report on Jenkins server
            publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: env.REPORT_DIR,
                reportFiles: 'index.html',
                reportName: 'Code Coverage Report'
            ])
        }
    }
}
  
