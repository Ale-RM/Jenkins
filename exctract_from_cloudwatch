pipeline {
    agent any

    stages {
        stage('Start Query') {
            steps {
                script {
                    // Set loggroup name..
                    // Set correct dates..
                    def queryId = sh(script: "aws logs start-query --log-group-name 'log-group-name' --start-time \$(date -d '2023-05-01' +%s) --end-time \$(date -d '2023-06-30' +%s) --query-string 'fields @timestamp, @message | parse @message \"*,\" as ipAddress | filter @message like /INFO/ | stats count() by ipAddress | sort @timestamp desc' | jq -r '.queryId'", returnStdout: true).trim()
                    writeFile file: 'query_id.txt', text: queryId
                }
            }
        }

        stage('Get Query Results') {
            steps {
                script {
                    def queryId = readFile('query_id.txt').trim()
                    def logs = sh(script: "aws logs get-query-results --query-id ${queryId} | jq -r '.results[] | map({(.field): .value}) | add' > logs.json", returnStdout: true).trim()
                }
            }
        }

        stage('Get IP Info') {
            steps {
                script {
                    def logsJson = readJSON file: 'logs.json'
                    def ipInfoList = []
                    for (log in logsJson) {
                        def ip = log.ipAddress
                        def count = log.count
                        def ipInfo = sh(script: "curl ipinfo.io/${ip}", returnStdout: true).trim()
                        ipInfoList.add("${ip},${count},${ipInfo}")
                    }
                    writeFile file: 'ip_info.txt', text: ipInfoList.join('\n')
                }
            }
        }

        stage('Generate CSV') {
            steps {
                script {
                    def generatorScript = '''
import csv
import json

with open('ip_info.txt', 'r') as file:
    ipInfos = file.readlines()

data = [['Nome Utente', 'Indirizzo IP', 'Numero di Chiamate', 'CittÃ ', 'Regione', 'Coordinate GPS']]

for ipInfo in ipInfos:
    ip, count, infoJson = ipInfo.split(',', 2)
    info = json.loads(infoJson)
    data.append(['NOME COGNOME', ip, count, info['city'], info['region'], info['loc']])

with open('output.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(data)
'''
                    writeFile file: 'generator.py', text: generatorScript
                    sh 'python3 generator.py'
                }
            }
        }
    }
}


stage('Get IP Info') {
    steps {
        script {
            def logsJson = readJSON file: 'logs.json'
            def ipInfoList = []
            for (log in logsJson) {
                def ip = log.find { it.field == 'ipAddress' }.value
                def count = log.find { it.field == 'count()' }.value
                def ipInfo = sh(script: "curl ipinfo.io/${ip}", returnStdout: true).trim()
                ipInfoList.add("${ip},${count},${ipInfo}")
            }
            writeFile file: 'ip_info.txt', text: ipInfoList.join('\n')
        }
    }
}


stage('Get IP Info') {
    steps {
        script {
            sh '''
            for log in $(jq -c '.results[]' logs.json); do
                ip=$(echo $log | jq -r '.[] | select(.field=="ipAddress") | .value')
                count=$(echo $log | jq -r '.[] | select(.field=="count()") | .value')
                ipInfo=$(curl -s ipinfo.io/${ip})
                echo "${ip},${count},${ipInfo}" >> ip_info.txt
            done
            '''
        }
    }
}
stage('Get IP Info') {
    steps {
        script {
            def logsJson = readJSON file: 'logs.json'
            def ipInfoList = []
            for (log in logsJson) {
                def ip = ""
                def count = ""
                for (field in log) {
                    if (field.field == 'ipAddress') {
                        ip = field.value
                    } else if (field.field == 'count()') {
                        count = field.value
                    }
                }
                def ipInfo = sh(script: "curl ipinfo.io/${ip}", returnStdout: true).trim()
                ipInfoList.add("${ip},${count},${ipInfo}")
            }
            writeFile file: 'ip_info.txt', text: ipInfoList.join('\n')
        }
    }
}

stage('Get IP Info') {
    steps {
        script {
            sh '''
            while IFS= read -r ipLine && IFS= read -r countLine; do
                ip=$(echo $ipLine | jq -r '.ipAddress')
                count=$(echo $countLine | jq -r '."count()"')
                ipInfo=$(curl -s ipinfo.io/${ip})
                echo "${ip},${count},${ipInfo}" >> ip_info.txt
            done < logs.json
            '''
        }
    }
}


stage('Get IP Info') {
    steps {
        script {
            sh '''
            while IFS= read -r ipLine && IFS= read -r countLine; do
                ip=$(echo $ipLine | jq -r '.ipAddress')
                count=$(echo $countLine | jq -r '."count()"')
                ipInfo=$(curl -s ipinfo.io/${ip})
                echo "${ip},${count},${ipInfo}" >> ip_info.txt
            done < logs.json
            '''
        }
    }
}



stage('Get IP Info') {
    steps {
        script {
            sh '''
            while IFS= read -r log; do
                ip=$(echo $log | jq -r '.ipAddress')
                count=$(echo $log | jq -r '."count()"')
                ipInfo=$(curl -s ipinfo.io/${ip})
                echo "${ip},${count},${ipInfo}" >> ip_info.txt
            done < logs.json
            '''
        }
    }
}


stage('Get IP Info') {
    steps {
        script {
            sh '''
            while IFS= read -r ipLine && IFS= read -r countLine; do
                ip=$(echo $ipLine | jq -r '.ipAddress')
                count=$(echo $countLine | jq -r '."count()"')
                ipInfo=$(curl -s ipinfo.io/${ip})
                echo "${ip},${count},${ipInfo}" >> ip_info.txt
            done < logs.json
            '''
        }
    }
}
stage('Get IP Info') {
    steps {
        script {
            sh '''
            while IFS= read -r ipLine && IFS= read -r countLine; do
                ip=$(echo $ipLine | awk -F'"' '{print $4}')
                count=$(echo $countLine | awk -F'"' '{print $4}')
                ipInfo=$(curl -s ipinfo.io/${ip})
                echo "${ip},${count},${ipInfo}" >> ip_info.txt
            done < logs.json
            '''
        }
    }
}



stage('Get IP Info') {
    steps {
        script {
            sh '''
            while IFS= read -r line; do
                if echo $line | grep -q 'ipAddress'; then
                    ip=$(echo $line | sed -n 's/.*ipAddress": "\([^"]*\)".*/\1/p')
                elif echo $line | grep -q 'count()'; then
                    count=$(echo $line | sed -n 's/.*count()": "\([^"]*\)".*/\1/p')
                    ipInfo=$(curl -s ipinfo.io/${ip})
                    echo "${ip},${count},${ipInfo}" >> ip_info.txt
                fi
            done < logs.json
            '''
        }
    }
}


stage('Get IP Info') {
    steps {
        script {
            sh '''
            while IFS= read -r line; do
                if echo $line | grep -q 'ipAddress'; then
                    ip=$(echo $line | sed -n 's/.*ipAddress": "\\([^"]*\\)".*/\\1/p')
                elif echo $line | grep -q 'count()'; then
                    count=$(echo $line | sed -n 's/.*count()": "\\([^"]*\\)".*/\\1/p')
                    if [[ -n $ip && -n $count ]]; then
                        ipInfo=$(curl -s ipinfo.io/${ip} | jq -r '.city, .region, .loc')
                        echo "${ip},${count},${ipInfo}" >> ip_info.txt
                        ip=""
                        count=""
                    fi
                fi
            done < logs.json
            '''
        }
    }
}



stage('Get IP Info') {
    steps {
        script {
            sh '''
            rm -f ip_info.txt
            while IFS= read -r line; do
                if echo $line | grep -q 'ipAddress'; then
                    ip=$(echo $line | sed -n 's/.*ipAddress": "\\([^"]*\\)".*/\\1/p')
                elif echo $line | grep -q 'count()'; then
                    count=$(echo $line | sed -n 's/.*count()": "\\([^"]*\\)".*/\\1/p')
                    if [[ -n $ip && -n $count ]]; then
                        ipInfo=$(curl -s ipinfo.io/${ip} | jq -r '[.city, .region, .loc] | join(",")')
                        echo "${ip},${count},${ipInfo}" >> ip_info.txt
                        ip=""
                        count=""
                    fi
                fi
            done < logs.json
            '''
        }
    }
}


stage('Get IP Info') {
    steps {
        script {
            // Replace spaces in the name with underscores
            def fileName = intName.replaceAll(' ', '_')

            sh """
            rm -f ${fileName}_ip_info.txt
            while IFS= read -r line; do
                if echo \$line | grep -q 'ipAddress'; then
                    ip=\$(echo \$line | sed -n 's/.*ipAddress": "\\([^"]*\\)".*/\\1/p')
                elif echo \$line | grep -q 'count()'; then
                    count=\$(echo \$line | sed -n 's/.*count()": "\\([^"]*\\)".*/\\1/p')
                    if [[ -n \$ip && -n \$count ]]; then
                        ipInfo=\$(curl -s ipinfo.io/\${ip} | jq -r '[.city, .region, .loc] | join(",")')
                        echo "\${ip},\${count},\${ipInfo}" >> ${fileName}_ip_info.txt
                        ip=""
                        count=""
                    fi
                fi
            done < logs.json
            """
        }
    }
}



stage('Create Excel File') {
    steps {
        script {
            // Replace spaces in the name with underscores
            def fileName = intName.replaceAll(' ', '_')

            sh """
            python3 -m venv venv
            . venv/bin/activate
            pip install pandas openpyxl

            python3 <<EOF
            import pandas as pd

            # Read data from CSV file
            data = pd.read_csv('${fileName}_ip_info.txt', header=None)

            # Specify column names
            data.columns = ['Indirizzo IP', 'Numero di Chiamate', 'CittÃ ', 'Regione', 'Coordinate GPS']

            # Create a new Excel file with data
            with pd.ExcelWriter('${fileName}_output.xlsx') as writer:
                data.to_excel(writer, sheet_name='${fileName}')
            EOF
            """
        }
    }
}
stage('Create Excel File') {
    steps {
        script {
            sh """
            python3 -m venv pyvenv
            . pyvenv/bin/activate
            pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host=files.pythonhosted.org pandas openpyxl

            python3 <<EOF
import pandas as pd

# Read data from CSV file
data = pd.read_csv('${fileName}_ip_info.txt', header=None)

# Specify column names
data.columns = ['IP Address', 'BE request count', 'City', 'Region', 'Lat', 'Long']

# Combine 'Lat' and 'Long' into 'GPS Location'
data['GPS Location'] = data['Lat'] + ',' + data['Long']

# Drop 'Lat' and 'Long' columns
data = data.drop(columns=['Lat', 'Long'])

# Create a new Excel file with data
with pd.ExcelWriter('IntermediariGeolocation.xlsx') as writer:
    data.to_excel(writer, sheet_name='${fileName}')
EOF
            """
        }
    }
}




pipeline {
    agent any
    parameters {
        text(name: 'USER_NAMES', defaultValue: 'Mario Rossi, Luigi Bianchi, ...', description: 'Inserisci i nomi degli utenti separati da virgole')
    }
    stages {
        stage('Start Query') {
            steps {
                script {
                    def userNames = params.USER_NAMES.split(',')
                    for (userName in userNames) {
                        def queryId = sh(script: "aws logs start-query --log-group-name 'log-group-name' --start-time \$(date -d '2023-05-01' +%s) --end-time \$(date -d '2023-06-30' +%s) --query-string 'fields @timestamp, @message | parse @message \"*,\" as ipAddress | filter @message like /INFO/ | filter @message like /${userName}/ | stats count() by ipAddress | jq -r '.queryId'", returnStdout: true).trim()
                        def logs = sh(script: "aws logs get-query-results --query-id ${queryId} | jq -r '.results[] | map({(.field): .value}) | add' > ${userName}_logs.json", returnStdout: true).trim()
                    }
                }
            }
        }

        stage('Get IP Info') {
            steps {
                script {
                    def userNames = params.USER_NAMES.split(',')
                    for (userName in userNames) {
                        sh """
                        rm -f ${userName}_ip_info.txt
                        while IFS= read -r line; do
                            if echo \$line | grep -q 'ipAddress'; then
                                ip=\$(echo \$line | sed -n 's/.*ipAddress": "\\([^"]*\\)".*/\\1/p')
                            elif echo \$line | grep -q 'count()'; then
                                count=\$(echo \$line | sed -n 's/.*count()": "\\([^"]*\\)".*/\\1/p')
                                if [[ -n \$ip && -n \$count ]]; then
                                    ipInfo=\$(curl -s ipinfo.io/\${ip} | jq -r '[.city, .region, .loc] | join(",")')
                                    echo "\${ip},\${count},\${ipInfo}" >> ${userName}_ip_info.txt
                                    ip=""
                                    count=""
                                fi
                            fi
                        done < ${userName}_logs.json
                        """
                    }
                }
            }
        }

        stage('Create Excel File') {
            steps {
                script {
                    sh """
                    python3 -m venv myenv
                    . myenv/bin/activate
                    pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host=files.pythonhosted.org pandas openpyxl

                    python3 <<EOF
import pandas as pd
import glob

# Create a new Excel writer object
with pd.ExcelWriter('IntermediariGeolocation.xlsx') as writer:
    # Get a list of all ip_info.txt files
    files = glob.glob('*_ip_info.txt')

    # Loop over all files
    for file in files:
        # Read data from CSV file
        data = pd.read_csv(file, header=None)

        # Specify column names
        data.columns = ['Indirizzo IP', 'Numero di Chiamate', 'CittÃ ', 'Regione', 'Latitudine', 'Longitudine']

        # Convert 'Latitudine' and 'Longitudine' to string and combine them into 'Coordinate GPS'
        data['Coordinate GPS'] = data['Latitudine'].astype(str) + ',' + data['Longitudine'].astype(str)

        # Drop 'Latitudine' and 'Longitudine' columns
        data = data.drop(columns=['Latitudine', 'Longitudine'])

        # Get the user name from the file name
        user_name = file.split('_ip_info.txt')[0]

        # Write data to a new sheet in the Excel file
        data.to_excel(writer, sheet_name=user_name, index=False)
EOF
                    """
                }
            }
        }
    }
}
stage('Get IP Info') {
    steps {
        script {
            def userNames = params.USER_NAMES.split(',')
            for (userName in userNames) {
                sh """
                rm -f ${userName}_ip_info.txt
                while IFS= read -r line; do
                    if echo \$line | grep -q 'ipAddress'; then
                        ip=\$(echo \$line | sed -n 's/.*ipAddress": "\\([^"]*\\)".*/\\1/p')
                    elif echo \$line | grep -q 'count()'; then
                        count=\$(echo \$line | sed -n 's/.*count()": "\\([^"]*\\)".*/\\1/p')
                        if [[ -n \$ip && -n \$count ]]; then
                            ipInfo=\$(curl -s ipinfo.io/\${ip} | jq -r '[.city, .region, .loc] | join(",")')
                            echo "\${ip},\${count},\${ipInfo}" >> ${userName}_ip_info.txt
                            ip=""
                            count=""
                        fi
                    fi
                done < ${userName}_logs.json
                """
            }
        }
    }
}


stage('Get Query Results') {
    steps {
        script {
            def userNames = params.USER_NAMES.split(';')
            for (userName in userNames) {
                // Replace spaces with underscores in the file name
                def fileName = userName.replaceAll(' ', '_')
                def logs = sh(script: "aws logs get-query-results --query-id ${queryId} | jq -r '.results[] | map({(.field): .value}) | add' > ${fileName}_logs.json", returnStdout: true).trim()
            }
        }
    }
}


